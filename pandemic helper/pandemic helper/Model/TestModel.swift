//
//  TestModel.swift
//  test_h
//
//  Created by Mac-HOME on 04.05.2020.
//  Copyright ¬© 2020 Mac-HOME. All rights reserved.
//

import Foundation

class TestModel {
    // Questions to indentify availability
    let indentQuestions = [
        "–•–æ—Ä–æ—à–æ –ª–∏ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤: \n\n —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ | —Ç–æ—à–Ω–æ—Ç–∞ | –ø–æ–Ω–æ—Å | –æ–∑–Ω–æ–± | —Å–ª–∞–±–æ—Å—Ç—å | –ø–æ—Ç–µ—Ä—è –∞–ø–ø–µ—Ç–∏—Ç–∞ | –±–æ–ª—å –≤ –º—ã—à—Ü–∞—Ö",
        "–£ –≤–∞—Å –µ—Å—Ç—å –æ–¥—ã—à–∫–∞ –∏–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è —Å –¥—ã—Ö–∞–Ω–∏–µ–º?",
        "–£ –≤–∞—Å –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∫–∞—à–µ–ª—å?",
        "–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—Ö–æ—Ä–∞–¥–∫–∞?",
        "–°–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –∑–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10 —Å–µ–∫—É–Ω–¥. \n\n –û—à—É—â–∞–µ—Ç–µ –ª–∏ –≤—ã –±–æ–ª—å –≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ?"
    ]
    // weight of answer yes: min - -3 / max - 3
    let indentQuestionsWeight = [1, 2, 3, 4, 5, 5]
    
    // Questions to estimate riscs
    let riskQuestions = [
        "–í–∞–º –±–æ–ª—å—à–µ 60 –ª–µ—Ç?",
        "–ß–∞—Å—Ç–æ –ª–∏ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–∂–∏–≤–ª—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö?",
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞—Å—Ç–º–∞?",
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏–∞–±–µ—Ç?",
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–∏–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?",
        "–í—ã –æ–±—â–∞–ª–∏—Å—å —Å —Ç–µ–º–∏, —É –∫–æ–≥–æ –±—ã–ª –ø–æ—Ç–¥–≤–µ—Ä–∂–¥—ë–Ω –¥–∏–∞–≥–Ω–æ–∑, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π?",
        "–ï—Å–ª–∏ –≤—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —É–ª–∏—Ü—É, –≤—ã –Ω–∞–¥–µ–≤–∞–µ—Ç–µ –º–∞—Å–∫—É, —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é?",
        "–í—ã —á–∞—Å—Ç–æ –±–æ–ª–µ–ª–∏ –û–†–í–ò –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–¥–∞?"
    ]
    // weight of answer yes: min - -5 / max - 5
    let riskQuestionsWeight = [5, 2, 4, 4, 2, 5, 1, 1]
    
    // Indentity test answers
    let positiveIndentAnswer = "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ COVID-19"
    let negativeIndentAnswer = "–£ –≤–∞—Å –∏–º–µ—é—Ç—Å—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ COVID-19"
    
    // Risc test answers
    let positiveRiscAnswer = "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞"
    let negativeRiscAnswer = "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞"
    
    // Warnings for indentification test
    let warning1 = "–õ–∏—Ö–æ—Ä–∞–¥–∫–∞ - –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–∏–º–ø—Ç–æ–º –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏. –°—Ä–æ—á–Ω–æ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    let warning2 = "–ö–∞—à–µ–ª—å - –≤—Ç–æ—Ä–æ–π –ø–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–º–ø—Ç–æ–º –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏. –°—Ä–æ—á–Ω–æ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    let warning3 = "–ö–∞—à–µ–ª—å –∏ –±–æ–ª—å –≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ –¥—ã—Ö–∞–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π –¥–æ–ª–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ–ª–µ–∑–Ω–∏. –ü—Ä–æ–π–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞\n\nüëá"
    let asking = "–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫—Ä—É–≥ –æ–±—â–µ–Ω–∏—è –∏ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    
    // Warnings for risc test
    let warning4 = "–£ –ª—é–¥–∏ —Å –∞—Å—Ç–º–æ–π —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏—Ç—å—Å—è —Ç—è–∂—ë–ª–∞—è —Ñ–æ—Ä–º–∞ –±–æ–ª–µ–∑–Ω–∏. –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    let warning5 = "–£ –ª—é–¥–∏ —Å –¥–∏–∞–±–µ—Ç–æ–º —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏—Ç—å—Å—è —Ç—è–∂—ë–ª–∞—è —Ñ–æ—Ä–º–∞ –±–æ–ª–µ–∑–Ω–∏. –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    let warning6 = "–£ –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏—Ç—å—Å—è —Ç—è–∂—ë–ª–∞—è —Ñ–æ—Ä–º–∞ –±–æ–ª–µ–∑–Ω–∏. –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    
    // Recomendations and instructions
    let recommendation = "–ï—Å–ª–∏ –≤–∞—Å —á—Ç–æ-—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É\n\nüëá"
    let wish = "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å—Ä–æ—á–Ω–æ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é (—Ç–µ–ª. 103) –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\nüëá"
    let instruction = "–ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –¥–æ–∫—Ç–æ—Ä—É –æ–Ω–ª–∞–π–Ω\n\nüëá"
   
    // Advertisments
    let advertisment = "–í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º –ø–æ –ø–æ–≤–æ–¥—É –≤–∞—à–µ–≥–æ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è\n\nüëá"
    
    let a = ""
    
    var questions : [String]
    var weight: [Int]
    var questionInd : Int
    var weightScore: Int
    var positiveAnswer : String
    var negativeAnswer : String
    var isIndentTest: Bool
    var isUserNeedAdv : Bool
    var isUserNeedWarning1 : Bool
    var isUserNeedWarning2 : Bool
    var isUserNeedWarning3 : Bool
    var isUserNeedWarning4 : Bool
    var isUserNeedWarning5 : Bool
    var isUserNeedWarning6 : Bool
    
    init() {
        questionInd = 0
        weightScore = 0
        questions = []
        weight = []
        positiveAnswer = ""
        negativeAnswer = ""
        isIndentTest = false
        isUserNeedAdv = false
        isUserNeedWarning1 = false
        isUserNeedWarning2 = false
        isUserNeedWarning3 = false
        isUserNeedWarning4 = false
        isUserNeedWarning5 = false
        isUserNeedWarning6 = false
    }
    
    func startIndentTest() {
        reset()
        questions = indentQuestions
        weight = indentQuestionsWeight
        positiveAnswer = positiveIndentAnswer
        negativeAnswer = negativeIndentAnswer
        isIndentTest = true
    }
    
    func startRiskTest() {
        reset()
        questions = riskQuestions
        weight = riskQuestionsWeight
        positiveAnswer = positiveRiscAnswer
        negativeAnswer = negativeRiscAnswer
        isIndentTest = false
    }
    
    func getCurQuestion() -> String {
        return questions[questionInd]
    }
    
    func nextQuestion() {
        questionInd += 1
    }
    
    func answerYes() {
        if questionInd == 1 {
            isUserNeedWarning6 = true
        } else if questionInd == 3 {
            isUserNeedWarning4 = true
        } else if questionInd == 4 {
            isUserNeedAdv = true
            isUserNeedWarning2 = true
            isUserNeedWarning5 = true
        } else if questionInd == 5 {
            isUserNeedWarning1 = true
        } else if questionInd == 6 {
            isUserNeedWarning3 = true
        }
        weightScore += weight[questionInd - 1]
    }
    
    func getProgress() -> Float {
        return Float(questionInd) / Float(questions.count)
    }
    
    func isPositiveAnswer() -> Bool {
        return weightScore < 5
    }
    
    func getAnswer() -> String {
        return isPositiveAnswer() ? positiveAnswer : negativeAnswer
    }
    
    // Get more detailed result
    func getDiscription() -> String {
        var description : String
        if isPositiveAnswer() {
            // Positive answers
            if isIndentTest {
                description = recommendation
            } else {
                if (isUserNeedAdv) {
                    description = advertisment
                } else {
                    description = instruction
                }
            }
        } else {
            // Negative answers
            if isIndentTest {
                if (isUserNeedWarning1) {
                    description = warning1
                } else if (isUserNeedWarning2) {
                    description = warning2
                } else if (isUserNeedWarning3) {
                    description = warning3
                } else {
                    description = asking
                }
            } else {
                if (isUserNeedWarning4) {
                    description = warning4
                } else if (isUserNeedWarning5) {
                    description = warning5
                } else if (isUserNeedWarning6) {
                    description = warning6
                } else {
                    description = wish
                }
            }
        }
        
        return description
    }
    
    func getWarning() -> String {
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –¥–æ–º–∞. –ù–µ –ø–æ–¥–≤–µ—Ä–≥–∞–π—Ç–µ —Ä–∏—Å–∫—É —Å–µ–±—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö."
    }
    
    func reset() {
        questionInd = 0
        weightScore = 0
        isUserNeedAdv = false
        isUserNeedWarning1 = false
        isUserNeedWarning2 = false
        isUserNeedWarning3 = false
        isUserNeedWarning4 = false
        isUserNeedWarning5 = false
        isUserNeedWarning6 = false
    }
}
